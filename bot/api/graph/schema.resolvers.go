package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"
	"github.com/tashima42/awa-bot/bot/api/auth"
	"github.com/tashima42/awa-bot/bot/pkg/db"
	"log"
	"strconv"

	werrors "github.com/pkg/errors"
	"github.com/tashima42/awa-bot/bot/api/graph/model"
)

// Migrate is the resolver for the migrate field.
func (r *mutationResolver) Migrate(ctx context.Context, input model.MigrateInput) (*model.MigrateOutput, error) {
	var currentVersion uint
	var dirty bool
	var err error
	log.Println("mutation: migrating database")
	log.Printf("input version: %v", input.Version)
	if input.Version == nil {
		log.Println("nil version, migration to latest version")
		currentVersion, dirty, err = r.Repo.Up()
		if err != nil && err.Error() != "no change" {
			return nil, err
		}
	} else {
		log.Println("version is specified, migration to the version")
		version, err := strconv.Atoi(*input.Version)
		if err != nil {
			return nil, werrors.Wrapf(err, "failed to parse version: %s", *input.Version)
		}
		currentVersion, dirty, err = r.Repo.Version(uint(version))
		if err != nil && err.Error() != "no change" {
			return nil, err
		}
	}
	v := strconv.FormatUint(uint64(currentVersion), 10)
	return &model.MigrateOutput{
		Version: &v,
		Success: &dirty,
	}, nil
}

// RegisterWater is the resolver for the registerWater field.
func (r *mutationResolver) RegisterWater(ctx context.Context, input model.RegisterWaterInput) (*model.RegisterWaterOutput, error) {
	if input.Water == nil {
		return nil, fmt.Errorf("water is required")
	}
	if input.Water.Amount == nil {
		return nil, fmt.Errorf("amount is required")
	}
	user := auth.ForContext(ctx)
	if user == nil {
		return nil, fmt.Errorf("missing user in context")
	}
	err := r.Repo.RegisterWater(ctx, db.Water{UserId: user.Id, Amount: *input.Water.Amount})
	if err != nil {
		return nil, werrors.Wrap(err, "failed to register water")
	}
	success := true
	return &model.RegisterWaterOutput{
		Success: &success,
	}, nil
}

// MigrateOutput is the resolver for the migrateOutput field.
func (r *queryResolver) MigrateOutput(ctx context.Context) (*model.MigrateOutput, error) {
	panic(fmt.Errorf("not implemented: MigrateOutput - migrateOutput"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
